{
  "hash": "3c7d306f8993bf84d92c79658d0fc776",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Dissolved Oxygen Simulation\"\nsubtitle: \"Lecture 08\"\nauthor: \"Vivek Srikrishnan\"\ncourse: \"BEE 4750\"\ninstitution: \"Cornell University\"\ndate: \"September 11, 2023\"\nformat:\n    revealjs:\n        slide-number: c/t\n        show-slide-number: all\n        center-title-slide: true\n        width: 1280\n        height: 720\n        transition: none\n        toc: true\n        toc-depth: 1\n        toc-title: \"Overview\"\n        history: false\n        link-external-newwindow: true\n        theme: ../sass/slides.scss\n        footer: \"[BEE 4750, Environmental Systems Analysis](https://viveks.me/environmental-systems-analysis)\"\n        template-partials:\n            - title-slide.html\n        menu:\n            numbers: true\n        html-math-method: mathjax\n        include-in-header: mathjax-config.html\n        date-format: long\n        highlight-style: tango\n        code-line-numbers: false\njulia:\n    exeflags: [\"+1.10.4\"]\nexecute:\n    freeze: auto\n---\n\n# Review and Questions\n\n## Last Class\n\n:::: {.columns}\n::: {.column width=40%}\n- Dissolved Oxygen: essential quantity for aquatic life\n- Minimum concentration regulated\n- Used mass-balance to derive first-order equation\n:::\n\n::: {.column width=60%}\n\n![Processes influencing oxygen balance in moving freshwater](images/do-processes.svg){height=100%}\n\n:::\n::::\n\n## DO Concentration Equation\n\n\\begin{align} \n\\overbrace{U \\frac{dC}{dx}}^{\\text{Concentration Change}} &= \\overbrace{k_a (C_s - C)}^{\\text{Reaeration}} + \\overbrace{P - R - S_B}^{\\text{Constants}} \\\\[0.5em]\n&\\quad - \\underbrace{k_cB_0\\exp\\left(\\frac{-k_cx}{U}\\right)}_{\\text{CBOD}} - \\underbrace{k_n N_0\\exp\\left(\\frac{-k_nx}{U}\\right)}_{\\text{NBOD}}\n\\end{align}\n\n## Questions\n\n:::: {.columns .center}\n::: {.column width=\"40%\"}\n![](images/vsrikrish-poll.png){fig-alt=\"Poll Everywhere QR Code\" fig-align=\"center\" width=\"100%\"}\n:::\n::: {.column width=60%}\n**Text**: VSRIKRISH to 22333\n\n**URL**: [https://pollev.com/vsrikrish](https://pollev.com/vsrikrish)\n<br><br>\n[See Results](https://www.polleverywhere.com/multiple_choice_polls/qKeig0hHShZYHAOmvZtZm?preview=true&controls=none){preview-link=\"true\"}\n:::\n::::\n\n\n# Dissolved Oxygen Simulation\n\n## Steady-State Mass-Balance Solution\n\n::: {.small-math}\n\\begin{align}\nC(x) &= C_s(1 - \\alpha_1) + C_0 \\alpha_1 - B_0 \\alpha_2 - N_0 \\alpha_3 + \\left(\\frac{P-R-S_B}{k_a}\\right) (1-\\alpha_1), \\\\[1em]\n\n\\alpha_1 &= \\exp\\left(-\\frac{k_a x}{U}\\right) \\\\[0.25em] \n\\alpha_2 &= \\left(\\frac{k_c}{k_a-k_c}\\right)\\left[\\exp\\left(\\frac{-k_c x}{U}\\right) - \\exp\\left(\\frac{-k_ax}{U}\\right)\\right] \\\\[0.25em]\n\\alpha_3 &= \\left(\\frac{k_n}{k_a-k_n}\\right)\\left[\\exp\\left(\\frac{-k_n x}{U}\\right) - \\exp\\left(\\frac{-k_ax}{U}\\right)\\right]\n\\end{align}\n:::\n\n## Steady-State Mass-Balance Solution\n\n\\begin{align}\nC(x) &= C_s(1 - \\alpha_1) + C_0 \\alpha_1 - B_0 \\alpha_2 - N_0 \\alpha_3 \\\\[0.5em]\n& \\qquad + \\left(\\frac{P-R-S_B}{k_a}\\right) (1-\\alpha_1),\n\\end{align}\n\n**Note**: Usually, these models ignore $P$, $R$, and $S_B$.\n\nWhy do you think that might be?\n\n## Dissolved Oxygen \"Sag\" Curve\n\n:::: {.columns}\n::: {.column width=40%}\n\nDissolved oxygen concentrations downstream of a waste release \"sag\" and then start to recover as CBOD and NBOD decrease.\n\n:::\n::: {.column width=60%}\n\n{{< embed notebooks/dissolved-oxygen.ipynb#fig-do-single >}}\n\n:::\n::::\n\n## How To Simulate\n\nSo far, this is only different from our single-box airshed in terms of the number of processes.\n\nSingle equation, straightforward to evaluate across many values of $x$ with a loop.\n\n```julia\nx = 0:x_step:x_max # array from 0 to x_max in stepsize x_step\n\nC = zeroes(length(x)) # initialize storage\nfor (i, y) in pairs(x)\n    C[i] = dissolved_oxygen(y, parameters)\nend\n```\n\n## Julia Sidebar: Loop Alternatives\n\nLoops in Julia are fast and should be used freely. \n\nBut there are some more concise alternatives, which may be more readable in some cases.\n\n## Julia Sidebar: Broadcasting\n\nBut some more concise alternatives (which may be more readable) include **broadcasting**:\n\n```julia\nx = 0:x_step:x_max # array from 0 to x_max in stepsize x_step\n\n# evaluate DO function over every x with fixed parameters\nC = (y -> dissolved_oxygen(y, parameters)).(x) \n```\n\nBroadcasting gets finicky over multiple inputs.\n\n## Julia Sidebar: Comprehensions\n\n...And **comprehensions** (in-line for loops, also in Python):\n\n```julia\nx = 0:x_step:x_max # array from 0 to x_max in stepsize x_step\n\n# evaluate DO function over every x with fixed parameters\nC = [dissolved_oxygen(y, parameters) for y in x]\n```\n\nCan \"stack\" the `for` loops in a comprehension to nest.\n\n## Julia Sidebar: When To Use Loops?\n\nThink about readability and ease of debugging!\n\n- If your code is complex and not wrapped in a function, or you have several nested loops, you should use a loop (*just be careful of scope...*)\n- If your code is complex, may be worth asking if you should write a function instead and use broadcasting or a comprehension.\n\n\n## Single-Discharge Example\n\n| Parameter | River | Waste | General |\n|:---------:|:-----:|:-----:|:-------:|\n| Volume (m^3^/d)\t \t\t| 100,000 | 10,000  | --- |\n| DO (mg/L)           \t\t \t| 6.4 \t   | 4.2 \t | --- |\n| CBOD\t(mg/L)\t \t\t        | 5  \t\t   | 49 \t | --- |\n| NBOD\t(mg/L)\t \t\t        | 5 \t   | 27 | --- |\n| $C_s$ (mg/L)                    | ---              | ---         | 7 |\n| $k_a$, $k_c$, $k_n$       | ---              | ---         | 0.8, 0.5, 0.4 |   \n\n## Single-Discharge Example: Initial Condition\n\nHow do we find the initial state ($x=0$)?\n\n::: {.fragment .fade-in}\nNeed to compute the mixed concentrations of DO, CBOD, and NBOD ($Q$ is the flow volume):\n\n$$C_0 = C_\\text{mixed} = \\frac{C_\\text{river} \\times Q_\\text{river} + C_\\text{waste} \\times Q_\\text{waste}}{Q_\\text{river} + Q_\\text{waste}}$$\n:::\n\n## Single-Discharge Example: Initial Condition\n\nSo the initial values:\n\n$$C_0 = 6.2 \\ \\text{mg/L}$$\n\n$$B_0 = 9 \\ \\text{mg/L}$$\n\n$$N_0 = 7 \\ \\text{mg/L}$$\n\n## Single-Discharge Example: Simulation\n\nNow we can compute $C(x)$ (river velocity $U = 5$ km/d).\n\n{{< embed notebooks/dissolved-oxygen.ipynb#do-sim >}}\n\n## Single-Discharge Example: Simulation\n\n{{< embed notebooks/dissolved-oxygen.ipynb#fig-do-sim >}}\n\n# Simulating Multiple Discharges\n\n## Multiple Discharges\n\nWhat happens if we have multiple discharge sites?\n\n![Schematic for Multiple Discharge Example](images/do-multi-release.svg)\n\n## Multiple Discharges\n\n:::: {.columns}\n::: {.column width=35%}\nThink about this as a multi-box problem:\n\n- **Box 1**: From Release 1 to Release 2\n- **Box 2**: From Release 2 to End\n:::\n\n::: {.column width=65%}\n![Multiple Discharge Boxes](images/do-multi-box.svg)\n\n:::\n::::\n\n\n## Multiple Discharges\n\n:::: {.columns}\n::: {.column width=35%}\n- Dynamics within each box are like single-release example;\n- Make sure to get new initial conditions from relevant outflows!\n:::\n\n::: {.column width=65%}\n![Multiple Discharge Boxes](images/do-multi-box.svg)\n\n:::\n::::\n\n## Multiple Discharges\n\n**Question**: Who would you penalize for lack of compliance?\n\n{{< embed notebooks/dissolved-oxygen.ipynb#fig-do-multi >}}\n\n# Key Points\n\n## Key Points\n\n- Simulation involves running the model over space/time.\n- Multiple sections as \"multi-box\" model: outflows from one box become inflows/initial conditions for another.\n- Assigning blame/responsibility in an interdependent system is not straightforward!\n\n## Simulation Framework Overview\n\n![Simulation Workflow Diagram](images/simulation-workflow.svg)\n\n# Upcoming Schedule\n\n## Next Classes\n\n**Wednesday/Friday**: Uncertainty, Risk, and Monte Carlo\n\n## Assessments\n\n- HW1 released today, due 9/22.\n\n",
    "supporting": [
      "lecture04-1_files"
    ],
    "filters": [],
    "includes": {}
  }
}