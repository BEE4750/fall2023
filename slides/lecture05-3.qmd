---
title: "Uncertainty and Simple Climate Models"
subtitle: "Lecture 12"
author: "Vivek Srikrishnan"
course: "BEE 4750"
institution: "Cornell University"
date: "September 22, 2023"
format:
    revealjs:
        slide-number: c/t
        show-slide-number: all
        center-title-slide: true
        width: 1280
        height: 720
        transition: none
        toc: true
        toc-depth: 1
        toc-title: "Overview"
        history: false
        link-external-newwindow: true
        theme: ../sass/slides.scss
        footer: "[BEE 4750, Environmental Systems Analysis](https://viveks.me/environmental-systems-analysis)"
        template-partials:
            - title-slide.html
        menu:
            numbers: true
        html-math-method: mathjax      
        include-in-header: mathjax-config.html
        date-format: long
execute:
    freeze: auto
julia:
    exeflags: ["+1.10.4"]
---

```{julia}
#| echo: false
#| output: false

import Pkg
Pkg.activate(".")
Pkg.instantiate()
```

```{julia}
#| echo: false
#| output: false

using Measures
using Random
using Plots
using CSV
using DataFrames
using Distributions
using StatsPlots

Random.seed!(1)
```


# Review and Questions

## Monte Carlo

Monte Carlo is **stochastic simulation**.

```{dot}
//| fig-width: 100%
digraph G {
    graph [
        rankdir=LR
        layout=dot
    ]
    node [
        fontname = "IBM Plex Sans, sans-serif"
        fontsize=25
    ]
    edge [
        arrowsize=0.75
        labeldistance=3
        penwidth=3
        fontname = "IBM Plex Sans, sans-serif"
        fontsize=25
        style=dashed
        color="#b31b1b"
        fontcolor="#b31b1b"
    ]
    a [label="Probability\n Distribution"]
    b [label = "Random\n Samples"]
    c [label="Model"]
    d [label="Outputs"]

    a -> b [
        label="Sample"
    ]
    b -> c [
        label="Input"
    ]
    c -> d [
        label="Simulate"
    ]
}

```

## Monte Carlo

Let $Y=f(X)$, where $X$ is a random variable. Let $\mathbb{E}[Y] = \mu$.

If $X_1, \ldots, X_n$ are independent samples, then the Monte Carlo estimate of $\mu$ is $$\tilde{\mu}_n = \frac{1}{n} \sum_{i=1}^n f(X_i) = \frac{1}{n}\sum_{i=1}^n Y_i.$$

The key point: $\tilde{\mu}_n \to \mu$ as $n \to \infty$.

## Monte Carlo Properties

Monte Carlo is an **unbiased estimator**: $$\mathbb{E}[\tilde{\mu}_n] = \mu.$$

Monte Carlo variance: $$\text{Var}[\tilde{\mu}_n] = \tilde{\sigma}_n^2 = \frac{\sigma_Y^2}{n}.$$

## Monte Carlo Confidence Intervals

This means we can obtain $\alpha$-confidence intervals:

$$\tilde{\mu}_n \pm \Phi^{-1}\left(1 - \frac{\alpha}{2}\right) \frac{\sigma_Y}{\sqrt{n}}.$$

## Questions?

{{< include _poll-prompt.qmd >}}

# Energy Balance and Climate Change

## Planetary Energy Balance

![Representation of Planetary Energy Balance](https://www.e-education.psu.edu/meteo469/sites/www.e-education.psu.edu.meteo469/files/lesson04/ebm_0_dim.gif)

::: {.caption}
Source: Reprinted from A Climate Modeling Primer, A. Henderson-Sellers and K. McGuffie, Wiley, pg. 58, (1987) via <https://www.e-education.psu.edu/meteo469/node/137>.
:::

## Radiative Forcing

Climate changes result from changes to the energy balance of the planet (or **radiative forcings**), due to *e.g.*:

- greenhouse gas emissions (which trap radiation, warming the planet);
- aerosol emissions from air pollution or volcanic eruptions (which block incoming radiation, cooling the planet);
- changes to the solar cycle (which can increase or decrease the incoming solar radiation).

## Historical and Projected Radiative Forcing

:::: {.columns}
::: {.column width=70%}
```{julia}
#| label: fig-rf
#| fig-align: center
#| fig-cap: Historical and projected radiative forcings.

# Dataset from https://zenodo.org/record/3973015
# The CSV is read into a DataFrame object, and we specify that it is comma delimited
forcings_all_85 = CSV.read("data/climate/ERF_ssp585_1750-2500.csv", DataFrame, delim=",")

# Separate out the individual components
forcing_co2_85 = forcings_all_85[!,"co2"]
# Get total aerosol forcings
forcing_aerosol_rad_85 = forcings_all_85[!,"aerosol-radiation_interactions"]
forcing_aerosol_cloud_85 = forcings_all_85[!,"aerosol-cloud_interactions"]
forcing_aerosol_85 = forcing_aerosol_rad_85 + forcing_aerosol_cloud_85
forcing_total_85 = forcings_all_85[!,"total"]
forcing_non_aerosol_85 = forcing_total_85 - forcing_aerosol_85
forcing_other_85 = forcing_total_85 - (forcing_co2_85 + forcing_aerosol_85)

t = time_forcing = Int64.(forcings_all_85[!,"year"]) # Ensure that years are interpreted as integers

plot(xlabel="Year", ylabel="Radiative Forcing (W/m²)", tickfontsize=14, guidefontsize=16, legendfontsize=14, leftmargin=10mm, bottommargin=5mm, right_margin=5mm)
plot!(time_forcing, forcing_total_85, label="Total", color=:black, linewidth=3)
plot!(time_forcing, forcing_co2_85, label="CO₂", color=:orange, linewidth=2)
plot!(time_forcing, forcing_aerosol_85, label="Aerosol", color=:blue, linewidth=2)
plot!(time_forcing, forcing_other_85, label="Other", color=:purple, linewidth=2)
vline!([2014], label="", color=:red, linestyle=:dash)
plot!(size=(800, 450))
xlims!((1750, 2100))
ylims!(-4.5, 10)

```
:::
::: {.column width=30%}
These projections are under RCP 8.5, which is the "worst-case" official future climate scenario.
:::
::::

## Historical and Projected Radiative Forcing

:::: {.columns}
::: {.column width=70%}
```{julia}
#| label: fig-rf-26
#| fig-align: center
#| fig-cap: Historical and projected radiative forcings.

# Dataset from https://zenodo.org/record/3973015
# The CSV is read into a DataFrame object, and we specify that it is comma delimited
forcings_all_26 = CSV.read("data/climate/ERF_ssp126_1750-2500.csv", DataFrame, delim=",")

# Separate out the individual components
forcing_co2_26 = forcings_all_26[!,"co2"]
# Get total aerosol forcings
forcing_aerosol_rad_26 = forcings_all_26[!,"aerosol-radiation_interactions"]
forcing_aerosol_cloud_26 = forcings_all_26[!,"aerosol-cloud_interactions"]
forcing_aerosol_26 = forcing_aerosol_rad_26 + forcing_aerosol_cloud_26
forcing_total_26 = forcings_all_26[!,"total"]
forcing_non_aerosol_26 = forcing_total_26 - forcing_aerosol_26
forcing_other_26 = forcing_total_26 - (forcing_co2_26 + forcing_aerosol_26)

t = time_forcing = Int64.(forcings_all_26[!,"year"]) # Ensure that years are interpreted as integers

plot(xlabel="Year", ylabel="Radiative Forcing (W/m²)", tickfontsize=14, guidefontsize=16, legendfontsize=14, leftmargin=10mm, bottommargin=5mm, right_margin=5mm)
plot!(time_forcing, forcing_total_26, label="Total", color=:black, linewidth=3)
plot!(time_forcing, forcing_co2_26, label="CO₂", color=:orange, linewidth=2)
plot!(time_forcing, forcing_aerosol_26, label="Aerosol", color=:blue, linewidth=2)
plot!(time_forcing, forcing_other_26, label="Other", color=:purple, linewidth=2)
vline!([2014], label="", color=:red, linestyle=:dash)
plot!(size=(800, 450))
xlims!((1750, 2100))
ylims!(-4.5, 10)
```
:::
::: {.column width=30%}
These are RCP 2.6, one of the "better" scenarios (often a lower bound on future warming).
:::
::::

## Global Mean Temperature

:::: {.columns}
::: {.column width=40%}
These radiative changes result in changes to global mean temperatures, which result in other impacts.

How can we model this relationship?
:::
::: {.column width=60%}
```{julia}
temps = CSV.read("data/climate/HadCRUT.5.0.1.0.analysis.summary_series.global.annual.csv", DataFrame, delim=",")

time_obs = temps[:, 1]
temp_obs = temps[:, 2]
temp_lo = temps[:, 3]
temp_hi = temps[:, 4]

temp_lo = temp_lo .- mean(temp_obs[1:20])
temp_hi = temp_hi .- mean(temp_obs[1:20])
temp_obs = temp_obs .- mean(temp_obs[1:20]) # compute anomalies relative to first 20 years of data

plot(time_obs, temp_obs, ribbon=(temp_obs-temp_lo,temp_hi-temp_obs), color="blue", linewidth=2, fillalpha=0.2, legend=false, xlabel="Year", ylabel="Temperature anomaly (°C)", labelfontsize=16, tickfontsize=14, bottom_margin=10mm, left_margin=10mm)
plot!(size=(750, 600))
```
:::
::::

# The Energy Balance Model (EBM)

## Sketch of the EBM

- Simplest possible climate model.
- Treats the Earth as a 0-dimensional sphere covered with water.
- Earth warms due to imbalance in average (over surface area) heat flux.

## EBM Equations

\begin{align*}
\overbrace{\frac{dH}{dt}}^{\text{change in heat}} &= \overbrace{F}^{\text{RF}} - \overbrace{\lambda T}^{\substack{\text{change in} \\ \text{temperature}}} \\
\underbrace{C}_{\substack{\text{ocean heat} \\ \text{capacity}}} \frac{dT}{dt} &= F - \lambda T \\
c\underbrace{d}_{\substack{\text{ocean} \\ \text{mixing depth}}} \frac{dT}{dt} &= F - \lambda T,
\end{align*}

## EBM Equations

- $c = 4.184\times 10^6 \\ \text{J/K/m}^2$ is the specific heat of water per area.
- Total RF: $$F = F_\text{non-aerosol} + \alpha F_\text{aerosol}.$$
- The proportionality coefficient $\lambda$ is important: it is the **climate feedback factor** and controls how much the Earth warms in response to radiative forcing.

## EBM Solution

We can solve the EBM using Euler timestepping:

\begin{gather*}
C dT/dt = F - \lambda T \\\\
\Rightarrow C \frac{T_{i+1}-T_i}{\Delta t} = F_i - \lambda T_i \\\\
\Rightarrow T_{i+1} = T_i + \frac{F_i - \lambda T_i}{C} \Delta t
\end{gather*}


## What the EBM Neglects

The EBM is a one-box model of the Earth's climate: models energy balance between incoming and outgoing heat. As such, it neglects:

- "Deep" ocean heat uptake and cycling.
- Multiple atmospheric layers.
- Spatial patterns of atmospheric and ocean circulation.

## Equilibrium Climate Sensitivity (ECS)

Under steady-state conditions (constant $F$ and $dT/dt = 0$), $$T = \frac{F}{\lambda}.$$

When we double atmospheric CO~2~, we refer to the equilibrium temperature $S$ as the **equilibrium climate sensitivity**:

$$S = \underbrace{F_{2\times \text{CO}_2}}_{\approx 4 \text{W/m}^2}/\lambda$$

## Equilibrium Climate Sensitivity Uncertainty

The ECS is very uncertain (though uncertainty has been reduced recently). 


:::: {.columns}
::: {.column width=60%}
A reasonable distribution is $S \sim \text{LogNormal}(\log(3.2), \log(2)/{3})$
:::
::: {.column width=40%}
```{julia}
ecs_dist = LogNormal(log(3.2), log(2)/3)
ecs_samples = rand(ecs_dist, 100000)
plot(density(ecs_samples), linewidth=3, legend=:false, tickfontsize=14)
plot!(size=(500, 300))
xlims!((0,7.2))
vline!([mean(ecs_samples)], linewidth=3, linestyle=:dash)
q_lo, q_hi = quantile(ecs_dist, [0.025, 0.975])
areaplot!(q_lo:0.01:q_hi, pdf.(ecs_dist, q_lo:0.01:q_hi), color=:gray, alpha=0.1)
```
:::
::::

## Best Fit EBM Simulation

:::: {.columns}
::: {.column width=40%}
Let's run the EBM with typical values of $S = 3.2^\circ$ C, $d=100$m, and $\alpha = 1.3$.
:::
::: {.column width=60%}
```{julia}
#| output: false

function model(p, forcing_aerosol, forcing_non_aerosol)
    S,d,α = p
    F2xCO₂ = 4.0 # radiative forcing [W/m²] for a doubling of CO₂
    λ = F2xCO₂/S
    
    c = 4.184e6 # heat capacity/area [J/K/m²]
    C = c*d # heat capacity of mixed layer (per area)

    F = forcing_non_aerosol + α*forcing_aerosol # radiative forcing

    Δt = 31558152. # annual timestep [s]
    
    T = zero(F)
    for i in 1:length(F)-1
        T[i+1] = T[i] + (F[i] - λ*T[i])/C * Δt
    end
    
    return T .- mean(T[1:20])
end
```

```{julia}
p = [3.2, 100., 1.3]
T_26 = model(p, forcing_aerosol_26, forcing_non_aerosol_26)
T_85 = model(p, forcing_aerosol_85, forcing_non_aerosol_85)
plt = plot(t, T_26, label="EBM for RCP 2.6", xlabel="Year", ylabel="Temperature anomaly (°C)", color="red", linewidth=2, labelfontsize=16, tickfontsize=14, legendfontsize=16, bottom_margin=5mm, right_margin=5mm, left_margin=5mm)
plot!(t, T_85, label="EBM for RCP 8.5", color="purple", linewidth=2)
xlims!((1750, 2100))
ylims!(-1, 7.5)
plot!(size=(700, 500))
```

:::
::::

## Comparison to Temperature Data

:::: {.columns}
::: {.column width=40%}
How well does this do against the temperature data?
:::
::: {.column width=60%}
```{julia}
plot!(time_obs, temp_obs, ribbon=(temp_obs-temp_lo,temp_hi-temp_obs), color="blue", linewidth=2, fillalpha=0.2, label="Observed Temperatures")
xlims!(1850, 2020)
ylims!(-1, 2)
```

:::
::::

# Monte Carlo Simulation and ECS Uncertainty

## Uncertainty Propagation in the Climate System

:::: {.columns}
::: {.column width=40%}

How does uncertainty in the ECS propagate to uncertainty in temperatures in 2100?
:::
::: {.column width=60%}
```{julia}
T_26 = zeros(length(ecs_samples), length(t))
T_85 = zeros(length(ecs_samples), length(t))
for i = 1:length(ecs_samples)
    T_26[i, :] = model([ecs_samples[i], 100., 1.3], forcing_aerosol_26, forcing_non_aerosol_26) 
    T_85[i, :] = model([ecs_samples[i], 100., 1.3], forcing_aerosol_85, forcing_non_aerosol_85)
end
# compute quantiles
temp_quantiles_26 = zeros(2, size(T_26)[2])
temp_quantiles_26[1, :] = quantile.(eachcol(T_26), 0.05)
temp_quantiles_26[2, :] = quantile.(eachcol(T_26), 0.95)
temp_median_26 = quantile.(eachcol(T_26), 0.5)
temp_quantiles_85 = zeros(2, size(T_85)[2])
temp_quantiles_85[1, :] = quantile.(eachcol(T_85), 0.05)
temp_quantiles_85[2, :] = quantile.(eachcol(T_85), 0.95)
temp_median_85 = quantile.(eachcol(T_85), 0.5)

plt = plot(t, temp_median_26, ribbon=(temp_median_26 - temp_quantiles_26[1, :], temp_quantiles_26[2, :] - temp_median_26), label="EBM for RCP 2.6", xlabel="Year", ylabel="Temperature anomaly (°C)", color="red", linewidth=2, labelfontsize=16, tickfontsize=14, legendfontsize=16, bottom_margin=5mm, right_margin=5mm, left_margin=5mm, fillalpha=0.2)
plot!(t, temp_median_85, ribbon=(temp_median_85 - temp_quantiles_85[1, :], temp_quantiles_85[2, :] - temp_median_85), label="EBM for RCP 8.5", xlabel="Year", ylabel="Temperature anomaly [°C]", color="purple", linewidth=2, fillalpha=0.2)
xlims!(1750, 2100)
ylims!(-1.2, 10)
plot!(size=(800, 500))
```

:::
::::

## Temperature Histograms

```{julia}
#| label: fig-histogram
#| fig-align: center
#| fig-cap: "Histogram of EBM output in 2100"

histogram(T_26[:, t .== 2100], label="EBM Projections for RCP 2.6", legendfontsize=16, tickfontsize=14, guidefontsize=16, xaxis="Temperature anomaly (°C)", yaxis="Count", left_margin=5mm, bottom_margin=5mm)
histogram!(T_85[:, t .== 2100], label="EBM Projections for RCP 8.5")
plot!(size=(1000, 550))
```

## Uncertainty Propagation in the Climate System

:::: {.columns}
::: {.column width=40%}
Adding in temperature data...
:::
::: {.column width=60%}

```{julia}
plot!(plt, time_obs, temp_obs, ribbon=(temp_obs-temp_lo,temp_hi-temp_obs), color="blue", linewidth=2, fillalpha=0.2, label="Observed Temperatures")
xlims!(1850, 2020)
ylims!(-1, 2)
plot!(size=(800, 500))
```

:::
::::

## Limits of the EBM Impact Parameterization

One of the problems is using parameter values/distributions which were chosen in a different context.

The EBM simplifies certain dynamics so much that these parameters, while they have physical interpretations, need different distributions or have different correlations.

Identifying these values for a particular model is called **model calibration**.

## How Do We Make These Plots in Julia?

- To compute quantiles and median, use `Distributions.quantile()`:

    ```julia
    # find median of vector v
    quantile(v, [0.5])
    ```

- Can broadcast quantile calculation over columns/rows of an array:

    ```julia
    # find median of array ebm_output for each year/column
    quantile.(eachcol(ebm_output), 0.5)
    ```

## How Do We Make These Plots in Julia?

- To plot intervals around a median (or other central value), use the `ribbon=` keyword in `plot()` to pass an array of bounds. For example:

    ```julia
    plot(t, temp_median_26, 
        ribbon=(temp_median_26 - temp_quantiles_26[1, :],
        temp_quantiles_26[2, :] - temp_median_26)...)
    ```

# Key Points

## Key Points

- **Uncertainty propagation** lets us quantify the impact of upstream uncertainties on system outputs
- Viewed the impact of climate sensitivity and radiative forcing uncertainty on temperature projections for a simple model.
- Distributions of uncertain inputs or parameters may not be directly usable in another model context due to model assumptions.

# Upcoming Schedule

## Next Classes

**Next Week**: Prescriptive Modeling and Optimization

## Assessments

**Today**: Homework 2 and Lab 2 both due.

**Monday**: Homework 3 released (on uncertainty propagation from the EBM to sea-level rise and levee heights)

**Next Friday**: Project Proposal due