---
title: "Plume Models: Multiple Sources and Receptors"
subtitle: "Lecture 20"
author: "Vivek Srikrishnan"
course: "BEE 4750"
institution: "Cornell University"
date: "October 20, 2023"
format:
    revealjs:
        slide-number: c/t
        show-slide-number: all
        center-title-slide: true
        width: 1280
        height: 720
        transition: none
        toc: true
        toc-depth: 1
        toc-title: "Overview"
        history: false
        link-external-newwindow: true
        theme: ../sass/slides.scss
        footer: "[BEE 4750, Environmental Systems Analysis](https://viveks.me/environmental-systems-analysis)"
        template-partials:
            - title-slide.html
        menu:
            numbers: true
        html-math-method: mathjax
        include-in-header: mathjax-config.html
        date-format: long
julia:
    exeflags: ["+1.10.4"]
execute:
    freeze: auto
---

```{julia}
import Pkg
Pkg.activate(".")
Pkg.instantiate()
```

```{julia}
using DataFrames
using Plots
using LaTeXStrings
using Measures
using JuMP
using HiGHS
using MarkdownTables
```

# Review and Questions

## Gaussian Plume for Air Pollution Dispersion

- Used for point sources.
- Typically for continuous emissions from an elevated source.

## Gaussian Plume Model

| Variable | Meaning | 
|:--------:|:--------|
| $C$ | Concentration (g/m$^3$) | 
| $Q$ | Emissions Rate (g/s) | 
| $H$ | Effective Source Height (m) | 
| $u$ | Wind Speed (m/s) |
| $y, z$ | Crosswind, Vertical Distance (m)


## Gaussian Plume Model

![Gaussian Plume Distribution](figures/air-pollution-plume-dist.png)


## Gaussian Plume Model With Ground Reflection

$$\begin{aligned}
C(x,y,z) = &\frac{Q}{2\pi u \sigma_y \sigma_z} \exp\left(\frac{-y^2}{2\sigma_y^2} \right) \times \\\\
& \quad \left[\exp\left(\frac{-(z-H)^2}{2\sigma_z^2}\right) + \exp\left(\frac{-(z+H)^2}{2\sigma_z^2}\right) \right]
\end{aligned}$$


## Questions

{{< include _poll-prompt.qmd >}}

# Multiple Point Sources

## Managing Multiple Plumes

We could use a Gaussian plume to simulate the effect of a single source, but often we:

- Have multiple sources that we need to manage;
- Care about compliance with regulatory standards at a particular important receptor.

## Multiple Point Source Example

Take three sources of SO~2~ (air quality standard 150 $\mu\text{g/m}^3$):

| Source | Emissions (kg/day) | Effective Height (m) | Removal Cost (\$/kg)
|:---:|---------:|-----------:|-----------:|
| 1 | 34,560 | 50 | 0.20 |
| 2 | 172,800 | 200 | 0.45 |
| 3 | 103,680 | 30 | 0.60 |

and five receptors at ground level with $u = 1.5$ m/s.

## Multiple Point Source Example

:::: {.columns}
::: {.column width=40%}

Our goal: 

Minimize cost of removing SO~2~ from the plume sources to ensure all receptors are not exposed beyond the 150 $\mu\text{g/m}^3$ standard.

:::
::: {.column width=60%}
```{julia}
sources = [(0, 7), (2, 5), (3, 5)]
receptors = [(1, 1.5), (3, 7), (5, 3), (7.5, 6), (10, 5)]

p = scatter(sources, label="Source", markersize=6, color=:red, xlabel=L"$x$ (km)", ylabel=L"$y$ (km)", guidefontsize=16, legendfontsize=16, tickfontsize=14, legend=:bottomright, ylims=(0, 8), xlims=(-0.5, 10.5), left_margin=5mm)
scatter!(receptors, label="Receptor", markersize=6, color=:black)
for i in 1:length(sources)
    annotate!(sources[i][1], sources[i][2] + 0.3, text(string(i), :red, 14, :center))
    annotate!(sources[i][1], sources[i][2] - 0.3, text(string(sources[i]), :red, 14, :center))    
end
for i in 1:length(receptors)
    annotate!(receptors[i][1], receptors[i][2] + 0.3, text(string(i), :black, 14, :center))
    annotate!(receptors[i][1], receptors[i][2] - 0.3, text(string(receptors[i]), :black, 14, :center))    
end
plot!(size=(600, 500))
plot!([(0, 7.75), (10, 7.75)], arrow=true, color=:blue, linewidth=2, label="")
annotate!(4.5, 8, text("Wind", :left, 18, :blue))
```

:::
::::

## Modeling Considerations

Need to know relationship between source emissions ($Q_i$) and receptor exposure.

- Receptors are only affected by upwind sources.
- Individual plume model gives us concentrations. How to combine?

::: {.fragment .fade-in}
$$
C_\text{total} = \frac{M_1 + M_2 + M_3}{V} = \frac{M_1}{V} + \frac{M_2}{V} + \frac{M_3}{V} = C_1 + C_2 + C_3
$$
:::

## Decision Variables

**What is the key set of decision variables?**

::: {.fragment .fade-in}
Fraction of SO~2~ removed at source $i$: $R_i$.

Alternatively, can reframe as level of emissions: 
$$Q_i = (1-R_i) \times E_i,$$
where $E_i$ is the emissions level (given in problem).
:::

## Constraints

**What is our main constraint?**

::: {.fragment .fade-in}
Need to ensure compliance with the air quality standard:

$$\text{Exp}_j \leq .00015 \text{g/m}^3$$

This means that we need to express $\text{Exp}_j$ as a linear function of the $R_i$.
:::

## Developing Constraints

Write $C_i(x,y) = Q_it_i(x,y)$, where the $t_i$ is the transmission factor from the Gaussian dispersion model:

$$t_i(x,y) = \frac{1}{2\pi u \sigma_y \sigma_z} \exp\left(\frac{-y^2}{2\sigma_y^2} + \frac{H^2}{\sigma_z^2}\right)$$


## Developing Constraints

This lets us write the exposure constraints as a linear function of $R_i$: 

For a receptor $j$ (with fixed location $(x_j, y_j)$),

$$
\begin{align}
\text{Exp}_j &= \sum_i Q_i t_i(x_j, y_j) \\
&= (1-R_i)E_it_i(x_j, y_j) \leq 0.00015\ \text{g/m}^3
\end{align}
$$

Write $t_{ij} = t_i(x_j, y_j)$.

## Dispersion Spread

However, we still need to do this analysis given a particular atmospheric stability class (or can test across all). Let's assume we're in stability class C.

![Dispersion Coefficients](figures/plume-dispersion.png)

::: {.caption}
Source: <https://courses.washington.edu/cee490/DISPCOEF4WP.htm>
:::

## Dispersion Spread

Using the equations:

$$\begin{align}
\sigma_y &= ax^{0.894} \\[0.5em]
\sigma_z &= cx^d + f,
\end{align}$$

we have $$\sigma_y = 104x^{0.894}, \qquad \sigma_z = 61x^{0.911}.$$

## Calculating Transmission Factors

```{julia}
#| echo: true
#| output: false
# delta_x, delta_y should be in m
function transmission_factor(Δx, Δy, u, H)
    if Δx <= 0 # check if source is upwind of receptor
        tf = 0.0 # ensure this is a Float
    else
        σy = 104 * (Δx / 1000)^0.894
        σz = 61 * (Δx / 1000)^0.911
        tf_coef = 1/(2 * pi * u * σy * σz)
        tf = tf_coef * exp((-0.5 * (Δy / σy)^2) + (H / σz)^2)
    end
    return tf
end
```

## Calculating Transmission Factors

For example, from Source 1 to Receptor 1:

```{julia}
#| echo: true
transmission_factor(1000, 5500, 1.5, 50)
```

Or from Source 1 to Receptor 2:

```{julia}
#| echo: true
transmission_factor(3000, 0, 1.5, 50)
```

## Objective

**What is our objective?**

::: {.fragment .fade-in}
Minimize cost:

$$
\begin{align}
\min_{R_i} & \sum_i RemCost_i \times (E_i \times R_i) \\[0.5em]
&= (0.20) (34560) R_1 + (0.45)(172800) R_2 + (0.60)(103680) R_3 \\[0.5em]
&= 6912R_1 + 77760R_2 + 62208R_3
\end{align}
$$
:::

## Final Problem

$$
\begin{align}
\min_{R_i} \quad & \sum_i RemCost_i \times (E_i \times R_i) & \\
\text{subject to:} & \\[0.5em]
&  \sum_{i=1}^3 E_i (1-R_i)t_{ij} \leq 0.00015 & \forall j \in 1:5 \\[0.5em]
& R_i \geq 0 & \forall i \in 1:3 \\[0.5em]
& R_i \leq 1 & \forall i \in 1:3 
\end{align}
$$

## Solution

```{julia}
E = [400, 2000, 1200]
sources = [(0, 7), (2, 5), (3, 5)]
receptors = [(1, 1.5), (3, 7), (5, 3), (7.5, 6), (10, 5)]
H = [50, 200, 30]

calctf(i, j) = transmission_factor(
                1000 * (receptors[j][1] - sources[i][1]),
                1000 * (receptors[j][2] - sources[i][2]), 
                1.5, H[i])
tf = [calctf(i, j) for i in 1:length(sources), j in 1:length(receptors)]

air_model = Model(HiGHS.Optimizer)
@variable(air_model, 0 <= R[1:3] <= 1)
@objective(air_model, Min, 6912*R[1] + 77760*R[2] + 62208*R[3])
@constraint(air_model, exposure[j in 1:5], 
    sum([E[i] * tf[i, j] * (1-R[i]) for i in 1:3]) <= .00015)
set_silent(air_model)
optimize!(air_model)

removals = value.(R)

results = DataFrame(Source=1:3, Emissions=E, Removed=round.(removals; digits=2) * 100)
rename!(results, 
    [:Source => :"Source", 
    :Emissions => :"SO2 Emissions (g/m^3)", 
    :Removed => "Removal Percentage (%)"])
markdown_table(results)
```

**Does this make sense?**

## Untreated Exposure 

In the absence of our treatment plan (exposure in $\mu$g/m$^3$):

```{julia}
untreated = round.((E .* tf) * 1e6; digits=0)
markdown_table(DataFrame(Source=1:3, R1=untreated[:, 1], R2=untreated[:, 2], R3=untreated[:, 3], R4=untreated[:, 4], R5=untreated[:, 5]))
```

Need to reduce Source 1's emissions to bring Receptor 2's exposure down. What about Sources 2 and 3?


## Why This Plan Makes Sense

We *could* reduce emissions from source 2 by ~85% to comply at receptor 5, but then would also need to reduce source 3's emissions by 100%. 

This plan involves eliminating all of source 2's emissions, but only 75% of source 3's.

Since removal at source 2 (\$0.45/kg) is cheaper than source 3 (\$0.60/kg), eliminating all of source 2's is cheaper, at a cost of **$124,416**.

## Treated Exposure

```{julia}
treated = round.((E .* (1 .- value.(R)) .* tf) .* 1e6; digits=0)
markdown_table(DataFrame(Source=1:3, R1=treated[:, 1], R2=treated[:, 2], R3=treated[:, 3], R4=treated[:, 4], R5=treated[:, 5]))
```

# Key Takeaways

## Key Takeaways

- Gaussian plume models can be useful for modeling continuous point source emissions.
- Can turn multi-source and receptor problems into an LP by linearizing Gaussian dispersion model when locations are fixed.

# Upcoming Schedule

## Next Classes

**Monday**: Mixed Integer Linear Programming

**Wednesday/Friday**: Applications (network models, unit commitment)

## Assessments

**HW4**: Due next Friday (10/27) at 9pm.

**Regulatory Report**: Due next Friday also.